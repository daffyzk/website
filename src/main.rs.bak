use axum::{extract::Path, response::Html, routing::get, Router};
use std::net::SocketAddr;

use tower::ServiceExt;
use tower_http::{
    services::{ServeDir, ServeFile},
    trace::TraceLayer,
};

#[tokio::main]
async fn main() {
    tracing_subscriber::registry()
        .with(
            tracing_subscriber::EnvFilter::try_from_default_env().unwrap_or_else(|_| {
                format!("{}=debug,tower_http=debug", env!("CARGO_CRATE_NAME")).into()
            }),
        )
        .with(tracing_subscriber::fmt::layer())
        .init();

    // Build the app with routes
    let app = Router::new()
        .route("/", get(home_handler))
        .route("/contact", get(contact_handler))
        .route("/blog", get(blog_home_handler))
        .route(
            "/blog/posts/:year/:month/:post_name",
            get(blog_post_handler),
        );

    // Define the address to listen on
    let addr = SocketAddr::from(([0, 0, 0, 0], 8080));
    println!("Listening on http://{}", addr);

    tokio::join!(serve(app));

    // Start the server
}

async fn serve(app: Router, port: u16) {
    let addr = SocketAddr::from(([127, 0, 0, 1], port));
    let listener = tokio::net::TcpListener::bind(addr).await.unwrap();
    tracing::debug!("listening on {}", listener.local_addr().unwrap());
    axum::serve(listener, app.layer(TraceLayer::new_for_http()))
        .await
        .unwrap();
}

// Handlers
async fn home_handler() -> Html<&'static str> {
    Html("<h1>Welcome to daffy.tech!</h1>")
}

async fn contact_handler() -> Html<&'static str> {
    Html("<h1>Contact Us at daffy.tech</h1>")
}

async fn blog_home_handler() -> Html<&'static str> {
    Html("<h1>Welcome to the Blog!</h1>")
}

async fn blog_post_handler(
    Path((year, month, post_name)): Path<(u32, u32, String)>,
) -> Html<String> {
    Html(format!(
        "<h1>Blog Post: {}/{}/{}!</h1>",
        year, month, post_name
    ))
}
